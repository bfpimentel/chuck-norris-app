apply(plugin: "jacoco")

subprojects {
    apply(plugin: "jacoco")
}

task jacocoTestReport(type: JacocoReport, dependsOn: [
        "app:testDebugUnitTest",
        "domain:testDebugUnitTest",
        "data:testDebugUnitTest"
]) {
    final commonFileExclusions = [
            '**/*Module*.*'
    ]

    final appFileExclusions = [
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/R.class',
            '**/R$*.class',
            '**/*Adapter*.*',
            '**/*ViewHolder*.*',
            '**/*Activity*.*',
            '**/*Fragment*.*',
            '**/*Application*.*',
            '**/SchedulerProvider**.*',
            '**/models',
            '**/entities',
    ]

    final dataFileExclusions = [
            '**/*Database**.*'
    ]

    final classDirectoriesTrees = [
            fileTree(dir: "${project.rootDir}/app/build/tmp/kotlin-classes/debug", excludes: appFileExclusions + commonFileExclusions),
            fileTree(dir: "${project.rootDir}/domain/build/tmp/kotlin-classes/debug", excludes: commonFileExclusions),
            fileTree(dir: "${project.rootDir}/data/build/tmp/kotlin-classes/debug", excludes: dataFileExclusions + commonFileExclusions)
    ]

    final coverageSourceDirs = [
            "${project.rootDir}/app/src/main/java",
            "${project.rootDir}/domain/src/main/java",
            "${project.rootDir}/data/src/main/java"
    ]

    final executionDataDirs = [
            "${project.rootDir}/app/build/jacoco/testDebugUnitTest.exec",
            "${project.rootDir}/domain/build/jacoco/testDebugUnitTest.exec",
            "${project.rootDir}/data/build/jacoco/testDebugUnitTest.exec"
    ]

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html')
        }
        xml {
            enabled true
            destination file('build/reports/jacoco/jacocoTestReport.xml')
        }
    }

    classDirectories.setFrom(files(classDirectoriesTrees))
    sourceDirectories.setFrom(files(coverageSourceDirs))
    executionData.setFrom(files(executionDataDirs))
}
