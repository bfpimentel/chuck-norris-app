apply(plugin: "jacoco")

subprojects {
    apply(plugin: "jacoco")
}

project.afterEvaluate {
    final fileExclusions = [
            'android/**/*.*',
            '**/BuildConfig.*',
            '**/R.class',
            '**/R$*.class',
            '**/*Adapter*.*',
            '**/*ViewHolder*.*',
            '**/*Module*.*',
            '**/*Activity*.*',
            '**/*Fragment*.*',
            '**/*Application*.*',
            '**/SchedulerProvider**.*',
            '**/ViewBindingHolder**.*',
            '**/RequestInterceptor.*'
    ]

    final unitTestTasks = [
            "app:testDebugUnitTest",
            "domain:test",
            "data:test"
    ]

    final classDirectoriesTrees = [
            fileTree(dir: "${project.rootDir}/app/build/tmp/kotlin-classes/debug", excludes: fileExclusions),
            fileTree(dir: "${project.rootDir}/domain/build/classes/kotlin/main"),
            fileTree(dir: "${project.rootDir}/data/build/classes/kotlin/main"),
    ]

    final coverageSourceDirs = [
            "${project.rootDir}/app/src/main/java",
            "${project.rootDir}/domain/src/main/java",
            "${project.rootDir}/data/src/main/java"
    ]

    final executionDataDirs = [
            "${project.rootDir}/app/build/jacoco/testDebugUnitTest.exec",
            "${project.rootDir}/domain/build/jacoco/test.exec",
            "${project.rootDir}/data/build/jacoco/test.exec",
    ]

    task jacocoTestReport(type: JacocoReport, dependsOn: unitTestTasks) {
        reports {
            html {
                enabled true
                destination file('build/reports/jacoco/html')
            }
            xml {
                enabled true
                destination file('build/reports/jacoco/jacocoTestReport.xml')
            }
        }

        classDirectories.setFrom(files(classDirectoriesTrees))
        sourceDirectories.setFrom(files(coverageSourceDirs))
        executionData.setFrom(files(executionDataDirs))
    }
}
